{"meta":{"title":"Beishan's Blog","subtitle":null,"description":null,"author":"Beishan","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-07-20T07:31:34.000Z","updated":"2018-07-20T07:31:34.769Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2018-07-20T07:32:17.915Z","updated":"2018-07-20T07:32:17.915Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-07-20T08:12:33.000Z","updated":"2018-07-20T08:12:39.285Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"git-study","slug":"git-study","date":"2018-09-05T03:17:45.000Z","updated":"2018-09-05T03:23:05.736Z","comments":true,"path":"2018/09/05/git-study/","link":"","permalink":"http://yoursite.com/2018/09/05/git-study/","excerpt":"","text":"git 学习\b1.移除版本控制12345git rm -r -n --cached &quot;bin/&quot; //-n：加上这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览。git rm -r --cached &quot;bin/&quot; //最终执行命令. git commit -m&quot; remove bin folder all file out of control&quot; //提交git push origin master //提交到远程服务器","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"gitlab-backup-recover","slug":"gitlab-backup-recover","date":"2018-07-20T06:12:06.000Z","updated":"2018-07-20T06:15:18.162Z","comments":true,"path":"2018/07/20/gitlab-backup-recover/","link":"","permalink":"http://yoursite.com/2018/07/20/gitlab-backup-recover/","excerpt":"GitLab 备份及恢复Gitlab 创建备份","text":"GitLab 备份及恢复Gitlab 创建备份 使用Gitlab一键安装包安装Gitlab非常简单, 同样的备份恢复与迁移也非常简单. 使用一条命令即可创建完整的Gitlab备份:1gitlab-rake gitlab:backup:create 使用以上命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1393513186_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分, 其中开头的1393513186是备份创建的日期. Gitlab 修改备份文件默认目录你也可以通过修改/etc/gitlab/gitlab.rb来修改默认存放备份文件的目录: 1gitlab_rails[&apos;backup_path&apos;] = &apos;/mnt/backups&apos; /mnt/backups修改为你想存放备份的目录即可, 修改完成之后使用gitlab-ctl reconfigure命令重载配置文件即可. Gitlab 自动备份也可以通过crontab使用备份命令实现自动备份: 12sudo su -crontab -e 加入以下, 实现每天凌晨2点进行一次自动备份: 10 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create Gitlab 恢复同样, Gitlab的从备份恢复也非常简单: 停止相关数据连接服务 12gitlab-ctl stop unicorngitlab-ctl stop sidekiq 从1393513186编号备份中恢复 1gitlab-rake gitlab:backup:restore BACKUP=1393513186 启动Gitlab1sudo gitlab-ctl start Gitlab迁移迁移如同备份与恢复的步骤一样, 只需要将老服务器/var/opt/gitlab/backups 目录下的备份文件拷贝到新服务器上的 /var/opt/gitlab/backups 即可(如果你没修改过默认备份目录的话). 但是需要注意的是新服务器上的Gitlab的版本必须与创建备份时的Gitlab版本号相同. 比如新服务器安装的是最新的7.60版本的Gitlab, 那么迁移之前, 最好将老服务器的Gitlab 升级为7.60在进行备份.","categories":[],"tags":[{"name":"gitlab","slug":"gitlab","permalink":"http://yoursite.com/tags/gitlab/"}]},{"title":"tomcat-mutil-pro-config","slug":"tomcat-mutil-pro-config","date":"2018-07-20T06:08:15.000Z","updated":"2018-07-20T06:15:59.959Z","comments":true,"path":"2018/07/20/tomcat-mutil-pro-config/","link":"","permalink":"http://yoursite.com/2018/07/20/tomcat-mutil-pro-config/","excerpt":"Tomcat 多项目部署","text":"Tomcat 多项目部署0、背景最近遇到一个工作需要在Tomcat下部署多个项目，要求不同的项目用不同的域名访问，在网上搜了搜发现方法还很多，在这里我们介绍我现在在用的方法： 首先我们来假定需要在Tomcat 里部署两个项目分别是：project1 和 project2访问他们的地址分别为：project1.example.com、project2.example.com 1、新建项目Folder首先我们在Tomcat目录下新建两个目录分别为 project1 和 project2 ,然后在他们的下面分别建一个ROOT文件夹， 注意ROOT一定要大写 2、配置Host节点接下来我们需要配置一下，当我们用不同域名来访问时，导向到不同的项目。很简单我们打开tomcat/conf下的server.xml文件找到以下节点： 123456&lt;Host name=&quot;localhost&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt; &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot; prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;&lt;/Host&gt; 然后在其下方加入如下两个Host节点 12345678&lt;Host name=&quot;project1.example.com&quot; appBase=&quot;project1&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;&lt;/Host&gt;&lt;Host name=&quot;project2.example.com&quot; appBase=&quot;project2&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;&lt;/Host&gt; 其中： name代表我们的域名 appBase 代表我们项目的根目录，一定要和我们第一步里建的目录名一模一样 3、部署项目接下来就是要把我们的项目部署到Tomcat里了，我们知道以前我们的部署方式都是打个war包放到webapps目录里就行了，但是我们这次就不能这样做了，我们需要手动解压war包(解压方法是先把.war后缀名改为 .zip然后解压就行)，然后把WEB-INF 同级的东西都Copy到我们对应项目的ROOT下,然后重启Tomcat大功告成。 4、检验成果如果用相应的域名可以访问相应的项目就代表成功了 至于那两个域名，直接修改hosts文件,把那两个域名指向本地即可（或者指向部署tomcat的目标机器）","categories":[],"tags":[]},{"title":"tomcat-auto-start","slug":"tomcat-auto-start","date":"2018-07-20T06:02:53.000Z","updated":"2018-07-20T07:13:31.215Z","comments":true,"path":"2018/07/20/tomcat-auto-start/","link":"","permalink":"http://yoursite.com/2018/07/20/tomcat-auto-start/","excerpt":"Tomcat 自启动配置0、思路写一个脚本然后利用系统的chkconfig 命令开启自启动","text":"Tomcat 自启动配置0、思路写一个脚本然后利用系统的chkconfig 命令开启自启动1、进入/etc/init.d2、创建服务脚本新建文件tomcat，内容如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#!/bin/sh# chkconfig: 345 99 10# description: Auto-starts tomcat# /etc/init.d/tomcat# Tomcat auto-start# Source function library.#. /etc/init.d/functions# source networking configuration.#. /etc/sysconfig/networkRETVAL=0# jre 路径export JRE_HOME=/usr/jre1.6.0_22# Tomcat pathexport CATALINA_HOME=/usr/tomcat6export CATALINA_BASE=/usr/tomcat6start()&#123; if [ -f $CATALINA_HOME/bin/startup.sh ]; then echo $\"Starting Tomcat\" $CATALINA_HOME/bin/startup.sh RETVAL=$? echo \" OK\" return $RETVAL fi&#125;stop()&#123; if [ -f $CATALINA_HOME/bin/shutdown.sh ]; then echo $\"Stopping Tomcat\" $CATALINA_HOME/bin/shutdown.sh RETVAL=$? sleep 1 ps -fwwu tomcat | grep apache-tomcat|grep -v grep | grep -v PID | awk '&#123;print $2&#125;'|xargs kill -9 echo \" OK\" # [ $RETVAL -eq 0 ] &amp;&amp; rm -f /var/lock/... return $RETVAL fi&#125;case \"$1\" in start) start ;; stop) stop ;;restart) echo $\"Restaring Tomcat\" $0 stop sleep 1 $0 start ;;*) echo $\"Usage: $0 &#123;start|stop|restart&#125;\" exit 1 ;;esacexit $RETVAL 3、给脚本添加执行权限1sudo chmod +x /etc/init.d/tomcat 4、设置开机自启动1chkconfig --add tomcat 5、开启tomcat系统服务1chkconfig tomcat on 6、启动tomcat服务1serice tomcat start 注意：if 与 [ 之间一定要有空格 以后我们也可以通过 service tomcat &lt;start|stop|restart&gt;来开启和关闭tomcat服务同时我们也可以通过写多个脚本来分别控制不同的tomcat","categories":[],"tags":[{"name":"tomcat","slug":"tomcat","permalink":"http://yoursite.com/tags/tomcat/"}]},{"title":"centos-time-sync","slug":"centos-time-sync","date":"2018-07-20T06:00:33.000Z","updated":"2018-07-20T08:31:06.979Z","comments":true,"path":"2018/07/20/centos-time-sync/","link":"","permalink":"http://yoursite.com/2018/07/20/centos-time-sync/","excerpt":"CentOS 自动同步时间0.查看当前系统时间1date","text":"CentOS 自动同步时间0.查看当前系统时间1date 1.同步系统时间12345678//更改时区（改为上海+8）cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime//同步时间ntpdate us.pool.ntp.org没有安装ntpdate 可以通过yum安装yum install -y ntpdate 2.定时同步时间 123crontab -e0-59/10 * * * * /usr/sbin/ntpdate us.pool.ntp.org | logger -t NTP每隔10分钟同步一次","categories":[],"tags":[{"name":"linux, centos, time","slug":"linux-centos-time","permalink":"http://yoursite.com/tags/linux-centos-time/"}]},{"title":"springboot-config-jar","slug":"springboot-config-jar","date":"2018-07-20T05:58:23.000Z","updated":"2018-07-20T08:31:21.907Z","comments":true,"path":"2018/07/20/springboot-config-jar/","link":"","permalink":"http://yoursite.com/2018/07/20/springboot-config-jar/","excerpt":"Spring boot 配置生成的jar 作为系统服务前言平常我们都通过 java -jar xxxx.jar 的方式来运行我们的服务，这样做一般都是我们在调试的时候，但是这个会随着我们shell的关闭而关闭，但是当我们要部署到生产环境的时候就不能这样做了我们需要让我们的程序以后台服务的形式运行，在网上搜索了下发现方法还不少，有简单的又复杂的，大概有这么几种","text":"Spring boot 配置生成的jar 作为系统服务前言平常我们都通过 java -jar xxxx.jar 的方式来运行我们的服务，这样做一般都是我们在调试的时候，但是这个会随着我们shell的关闭而关闭，但是当我们要部署到生产环境的时候就不能这样做了我们需要让我们的程序以后台服务的形式运行，在网上搜索了下发现方法还不少，有简单的又复杂的，大概有这么几种 打包成可执行jar（Windows、linux、MAC） nohup 和 shell Systemd AlwaysUp(Windows)看了下发现第二种和第四种方法还挺简单的 1. 打包成可执行jar首先配置一下我们的build插件如下所示，主要是增加executable 的配置 1234567891011&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;executable&gt;true&lt;/executable&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 然后我们运行 mvn install进行打包，构建一个可执行的包 然后就进入到运行阶段了， WINDOWS在windows下我们可以直接双击我们的xxxx.jar文件即可运行，这时候我们去任务管理器里查询就能发现一个javaw.exe 的进程正在运行，那就代表我们的服务正在运行了，当然了是不是真正的运行了你还要自己检测下应用程序的可访问性 LINUX我们可以直接建立一个软链接到/etc/init.d/目录下 1sudo ln -s /var/yourapp/yourapp.jar /etc/init.d/yourapp 然后 1/etc/init.d/yourapp start|stop|restart 即可运行","categories":[],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/tags/springboot/"}]},{"title":"git-install","slug":"git-install","date":"2018-07-20T05:55:57.000Z","updated":"2018-07-20T05:57:46.851Z","comments":true,"path":"2018/07/20/git-install/","link":"","permalink":"http://yoursite.com/2018/07/20/git-install/","excerpt":"CentOS 安装git一、简单安装1$ yum install git","text":"CentOS 安装git一、简单安装1$ yum install git 这种方式安装简单，就是版本太旧了（1.7.1），当我们需要用比较新的版本的时候，我们就需要自己编译安装了。 二、编译安装0、卸载旧git如果你已经安装了老版本的git，那么你需要先卸载老版本的git,没有安装的话请略过此步 1$ yum remove git 1、安装依赖库和编译环境12345678910$ yum groupinstall “Development Tools” #安装 编译工具包$ yum install zlib-devel perl-ExtUtils-MakeMaker asciidoc xmlto openssl-devel``` ### 2、下载压缩包``` bash$ cd /usr/src$ wget -O git.zip https://github.com/git/git/archive/master.zip$ unzip git.zip这个是直接从master分支下载的，需要其他版本请切换tag 3、编译1234$ cd git-master/$ autoconf$ ./configure$ make &amp;&amp; make install 4、创建软链接1$ ln -s /usr/local/bin/git /usr/bin 如果提示已存在就先删除软链接1$ rm /usr/bin/git 最后运行 git version 出现git 版本号即为成功","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"mysql-common-use-command","slug":"mysql-common-use-command","date":"2018-07-20T05:51:20.000Z","updated":"2018-07-20T05:51:43.705Z","comments":true,"path":"2018/07/20/mysql-common-use-command/","link":"","permalink":"http://yoursite.com/2018/07/20/mysql-common-use-command/","excerpt":"","text":"Mysql 常用操作1. 开启远程访问1grant all privileges on *.* to &apos;user&apos;@&apos;%&apos; identified by &apos;password&apos; with grant option;","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"hexo-error-fix","slug":"hexo-error-fix","date":"2018-07-20T03:47:45.000Z","updated":"2018-07-20T05:48:41.498Z","comments":true,"path":"2018/07/20/hexo-error-fix/","link":"","permalink":"http://yoursite.com/2018/07/20/hexo-error-fix/","excerpt":"Hexo 错误解决1. hexo new 命令报错：Error: Cannot find module ‘./build/Release/DTraceProviderBindings’ …","text":"Hexo 错误解决1. hexo new 命令报错：Error: Cannot find module ‘./build/Release/DTraceProviderBindings’ … 完整错误信息 1234567891011121314151617&#123; Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos; at Function.Module._resolveFilename (module.js:485:15) at Function.Module._load (module.js:437:25) at Module.require (module.js:513:17) at require (internal/module.js:11:18) at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:18:23) at Module._compile (module.js:569:30) at Object.Module._extensions..js (module.js:580:10) at Module.load (module.js:503:32) at tryModuleLoad (module.js:466:12) at Function.Module._load (module.js:458:3) at Module.require (module.js:513:17) at require (internal/module.js:11:18) at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18) at Module._compile (module.js:569:30) at Object.Module._extensions..js (module.js:580:10) at Module.load (module.js:503:32) code: &apos;MODULE_NOT_FOUND&apos; &#125; 解决办法： 执行如下命令即可解决12npm uninstall hexo-cli -gnpm install hexo -g 解决不了可以尝试下这个： 1npm install hexo --no-optional","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}
<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>gitlab-backup-recover</title>
      <link href="/2018/07/20/gitlab-backup-recover/"/>
      <url>/2018/07/20/gitlab-backup-recover/</url>
      <content type="html"><![CDATA[<h1 id="GitLab-备份及恢复"><a href="#GitLab-备份及恢复" class="headerlink" title="GitLab 备份及恢复"></a>GitLab 备份及恢复</h1><h3 id="Gitlab-创建备份"><a href="#Gitlab-创建备份" class="headerlink" title="Gitlab 创建备份"></a>Gitlab 创建备份</h3><a id="more"></a><p>使用Gitlab一键安装包安装Gitlab非常简单, 同样的备份恢复与迁移也非常简单. 使用一条命令即可创建完整的Gitlab备份:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure></p><blockquote><p>使用以上命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1393513186_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分, 其中开头的1393513186是备份创建的日期.</p></blockquote><h3 id="Gitlab-修改备份文件默认目录"><a href="#Gitlab-修改备份文件默认目录" class="headerlink" title="Gitlab 修改备份文件默认目录"></a>Gitlab 修改备份文件默认目录</h3><p>你也可以通过修改/etc/gitlab/gitlab.rb来修改默认存放备份文件的目录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab_rails[&apos;backup_path&apos;] = &apos;/mnt/backups&apos;</span><br></pre></td></tr></table></figure><blockquote><p><code>/mnt/backups</code>修改为你想存放备份的目录即可, 修改完成之后使用gitlab-ctl reconfigure命令重载配置文件即可.</p></blockquote><h3 id="Gitlab-自动备份"><a href="#Gitlab-自动备份" class="headerlink" title="Gitlab 自动备份"></a>Gitlab 自动备份</h3><p>也可以通过crontab使用备份命令实现自动备份:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su -</span><br><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>加入以下, 实现每天凌晨2点进行一次自动备份:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><h2 id="Gitlab-恢复"><a href="#Gitlab-恢复" class="headerlink" title="Gitlab 恢复"></a>Gitlab 恢复</h2><p>同样, Gitlab的从备份恢复也非常简单:</p><p>停止相关数据连接服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br></pre></td></tr></table></figure><blockquote><p>从1393513186编号备份中恢复</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore BACKUP=1393513186</span><br></pre></td></tr></table></figure><h3 id="启动Gitlab"><a href="#启动Gitlab" class="headerlink" title="启动Gitlab"></a>启动Gitlab</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl start</span><br></pre></td></tr></table></figure><h2 id="Gitlab迁移"><a href="#Gitlab迁移" class="headerlink" title="Gitlab迁移"></a>Gitlab迁移</h2><p>迁移如同备份与恢复的步骤一样, 只需要将老服务器/var/opt/gitlab/backups 目录下的备份文件拷贝到新服务器上的 /var/opt/gitlab/backups 即可(如果你没修改过默认备份目录的话). 但是需要注意的是新服务器上的Gitlab的版本必须与创建备份时的Gitlab版本号相同. 比如新服务器安装的是最新的7.60版本的Gitlab, 那么迁移之前, 最好将老服务器的Gitlab 升级为7.60在进行备份.</p>]]></content>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat-mutil-pro-config</title>
      <link href="/2018/07/20/tomcat-mutil-pro-config/"/>
      <url>/2018/07/20/tomcat-mutil-pro-config/</url>
      <content type="html"><![CDATA[<p>Tomcat 多项目部署<br><a id="more"></a><br>0、背景<br>最近遇到一个工作需要在Tomcat下部署多个项目，要求不同的项目用不同的域名访问，在网上搜了搜发现方法还很多，在这里我们介绍我现在在用的方法：</p><p>首先我们来假定需要在Tomcat 里部署两个项目分别是：<code>project1</code> 和 <code>project2</code><br>访问他们的地址分别为：<code>project1.example.com</code>、<code>project2.example.com</code></p><p>1、新建项目Folder<br>首先我们在Tomcat目录下新建两个目录分别为 <code>project1</code> 和 <code>project2</code> ,然后在他们的下面分别建一个ROOT文件夹，</p><p>注意ROOT一定要大写</p><p>2、配置Host节点<br>接下来我们需要配置一下，当我们用不同域名来访问时，导向到不同的项目。很简单我们打开tomcat/conf下的server.xml文件找到以下节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class="line">        unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">    &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">         prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</span><br><span class="line">         pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line">&lt;/Host&gt;</span><br></pre></td></tr></table></figure><p>然后在其下方加入如下两个Host节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;project1.example.com&quot;  appBase=&quot;project1&quot;</span><br><span class="line">        unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</span><br><span class="line">        xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</span><br><span class="line">&lt;/Host&gt;</span><br><span class="line">&lt;Host name=&quot;project2.example.com&quot;  appBase=&quot;project2&quot;</span><br><span class="line">        unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;</span><br><span class="line">        xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</span><br><span class="line">&lt;/Host&gt;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>name代表我们的域名</li><li>appBase 代表我们项目的根目录，一定要和我们第一步里建的目录名一模一样</li></ul><p>3、部署项目<br>接下来就是要把我们的项目部署到Tomcat里了，我们知道以前我们的部署方式都是打个war包放到webapps目录里就行了，但是我们这次就不能这样做了，我们需要手动解压war包(解压方法是先把.war后缀名改为 .zip然后解压就行)，然后把WEB-INF 同级的东西都Copy到我们对应项目的ROOT下,然后重启Tomcat大功告成。</p><p>4、检验成果<br>如果用相应的域名可以访问相应的项目就代表成功了</p><p>至于那两个域名，直接修改hosts文件,把那两个域名指向本地即可（或者指向部署tomcat的目标机器）</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>tomcat-auto-start</title>
      <link href="/2018/07/20/tomcat-auto-start/"/>
      <url>/2018/07/20/tomcat-auto-start/</url>
      <content type="html"><![CDATA[<h1 id="Tomcat-自启动配置"><a href="#Tomcat-自启动配置" class="headerlink" title="Tomcat 自启动配置"></a>Tomcat 自启动配置</h1><p>0、思路<br>写一个脚本然后利用系统的chkconfig 命令开启自启动<br><a id="more"></a><br>1、进入/etc/init.d<br>2、创建服务脚本<br>新建文件tomcat，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># chkconfig: 345 99 10</span></span><br><span class="line"><span class="comment"># description: Auto-starts tomcat</span></span><br><span class="line"><span class="comment"># /etc/init.d/tomcat</span></span><br><span class="line"><span class="comment"># Tomcat auto-start</span></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line"><span class="comment">#. /etc/init.d/functions</span></span><br><span class="line"><span class="comment"># source networking configuration.</span></span><br><span class="line"><span class="comment">#. /etc/sysconfig/network</span></span><br><span class="line">RETVAL=0</span><br><span class="line"><span class="comment"># jre 路径</span></span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/usr/jre1.6.0_22</span><br><span class="line"><span class="comment"># Tomcat path</span></span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME=/usr/tomcat6</span><br><span class="line"><span class="built_in">export</span> CATALINA_BASE=/usr/tomcat6</span><br><span class="line">start()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="variable">$CATALINA_HOME</span>/bin/startup.sh ];</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Starting Tomcat"</span></span><br><span class="line">            <span class="variable">$CATALINA_HOME</span>/bin/startup.sh</span><br><span class="line">            RETVAL=$?</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">" OK"</span></span><br><span class="line">            <span class="built_in">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line">stop()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh ];</span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Stopping Tomcat"</span></span><br><span class="line">            <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh</span><br><span class="line">        RETVAL=$?</span><br><span class="line">        sleep 1</span><br><span class="line">        ps -fwwu tomcat | grep apache-tomcat|grep -v grep | grep -v PID | awk <span class="string">'&#123;print $2&#125;'</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">" OK"</span></span><br><span class="line">        <span class="comment"># [ $RETVAL -eq 0 ] &amp;&amp; rm -f /var/lock/...</span></span><br><span class="line">        <span class="built_in">return</span> <span class="variable">$RETVAL</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        start</span><br><span class="line">        ;;</span><br><span class="line">    stop)  </span><br><span class="line">        stop</span><br><span class="line">        ;;</span><br><span class="line">restart)</span><br><span class="line">     <span class="built_in">echo</span> $<span class="string">"Restaring Tomcat"</span></span><br><span class="line">     <span class="variable">$0</span> stop</span><br><span class="line">     sleep 1</span><br><span class="line">     <span class="variable">$0</span> start</span><br><span class="line">     ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart&#125;"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></span><br></pre></td></tr></table></figure><p>3、给脚本添加执行权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/init.d/tomcat</span><br></pre></td></tr></table></figure></p><p>4、设置开机自启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --add tomcat</span><br></pre></td></tr></table></figure></p><p>5、开启tomcat系统服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig tomcat on</span><br></pre></td></tr></table></figure></p><p>6、启动tomcat服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serice tomcat start</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：if 与 [ 之间一定要有空格</p></blockquote><p>以后我们也可以通过 <code>service tomcat &lt;start|stop|restart&gt;</code>来开启和关闭tomcat服务<br>同时我们也可以通过写多个脚本来分别控制不同的tomcat</p>]]></content>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos-time-sync</title>
      <link href="/2018/07/20/centos-time-sync/"/>
      <url>/2018/07/20/centos-time-sync/</url>
      <content type="html"><![CDATA[<h1 id="CentOS-自动同步时间"><a href="#CentOS-自动同步时间" class="headerlink" title="CentOS 自动同步时间"></a>CentOS 自动同步时间</h1><h3 id="0-查看当前系统时间"><a href="#0-查看当前系统时间" class="headerlink" title="0.查看当前系统时间"></a>0.查看当前系统时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-同步系统时间"><a href="#1-同步系统时间" class="headerlink" title="1.同步系统时间"></a>1.同步系统时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//更改时区（改为上海+8）</span><br><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">//同步时间</span><br><span class="line">ntpdate us.pool.ntp.org</span><br><span class="line"></span><br><span class="line">没有安装ntpdate 可以通过yum安装</span><br><span class="line"></span><br><span class="line">yum install -y ntpdate</span><br></pre></td></tr></table></figure><p>2.定时同步时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">0-59/10 * * * * /usr/sbin/ntpdate us.pool.ntp.org | logger -t NTP</span><br><span class="line">每隔10分钟同步一次</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux, centos, time </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springboot-config-jar</title>
      <link href="/2018/07/20/springboot-config-jar/"/>
      <url>/2018/07/20/springboot-config-jar/</url>
      <content type="html"><![CDATA[<h2 id="Spring-boot-配置生成的jar-作为系统服务"><a href="#Spring-boot-配置生成的jar-作为系统服务" class="headerlink" title="Spring boot 配置生成的jar 作为系统服务"></a>Spring boot 配置生成的jar 作为系统服务</h2><p>前言<br>平常我们都通过 java -jar xxxx.jar 的方式来运行我们的服务，这样做一般都是我们在调试的时候，但是这个会随着我们shell的关闭而关闭，但是当我们要部署到生产环境的时候就不能这样做了我们需要让我们的程序以后台服务的形式运行，在网上搜索了下发现方法还不少，有简单的又复杂的，大概有这么几种</p><a id="more"></a><ul><li>打包成可执行jar（Windows、linux、MAC）</li><li>nohup 和 shell</li><li>Systemd</li><li>AlwaysUp(Windows)<br>看了下发现第二种和第四种方法还挺简单的</li></ul><h3 id="1-打包成可执行jar"><a href="#1-打包成可执行jar" class="headerlink" title="1. 打包成可执行jar"></a>1. 打包成可执行jar</h3><p>首先配置一下我们的build插件如下所示，主要是增加executable 的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们运行 mvn install进行打包，构建一个可执行的包</p><p>然后就进入到运行阶段了，</p><p>WINDOWS<br>在windows下我们可以直接双击我们的xxxx.jar文件即可运行，这时候我们去任务管理器里查询就能发现一个javaw.exe 的进程正在运行，那就代表我们的服务正在运行了，当然了是不是真正的运行了你还要自己检测下应用程序的可访问性</p><p>LINUX<br>我们可以直接建立一个软链接到/etc/init.d/目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /var/yourapp/yourapp.jar /etc/init.d/yourapp</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/yourapp start|stop|restart 即可运行</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git-install</title>
      <link href="/2018/07/20/git-install/"/>
      <url>/2018/07/20/git-install/</url>
      <content type="html"><![CDATA[<h2 id="CentOS-安装git"><a href="#CentOS-安装git" class="headerlink" title="CentOS 安装git"></a>CentOS 安装git</h2><p>一、简单安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install git</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>这种方式安装简单，就是版本太旧了（1.7.1），当我们需要用比较新的版本的时候，我们就需要自己编译安装了。</p><p>二、编译安装<br>0、卸载旧git<br>如果你已经安装了老版本的git，那么你需要先卸载老版本的git,没有安装的话请略过此步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove git</span><br></pre></td></tr></table></figure><p>1、安装依赖库和编译环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ yum groupinstall “Development Tools” #安装 编译工具包</span><br><span class="line">$ yum install zlib-devel perl-ExtUtils-MakeMaker asciidoc xmlto openssl-devel</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 2、下载压缩包</span><br><span class="line">``` bash</span><br><span class="line">$ cd /usr/src</span><br><span class="line">$ wget -O git.zip https://github.com/git/git/archive/master.zip</span><br><span class="line">$ unzip git.zip</span><br><span class="line">这个是直接从master分支下载的，需要其他版本请切换tag</span><br></pre></td></tr></table></figure></p><p>3、编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd git-master/</span><br><span class="line">$ autoconf</span><br><span class="line">$ ./configure</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>4、创建软链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /usr/local/bin/git /usr/bin</span><br></pre></td></tr></table></figure></p><p>如果提示已存在就先删除软链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm /usr/bin/git</span><br></pre></td></tr></table></figure></p><p>最后运行 git version 出现git 版本号即为成功</p>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql-common-use-command</title>
      <link href="/2018/07/20/mysql-common-use-command/"/>
      <url>/2018/07/20/mysql-common-use-command/</url>
      <content type="html"><![CDATA[<h2 id="Mysql-常用操作"><a href="#Mysql-常用操作" class="headerlink" title="Mysql 常用操作"></a>Mysql 常用操作</h2><h3 id="1-开启远程访问"><a href="#1-开启远程访问" class="headerlink" title="1. 开启远程访问"></a>1. 开启远程访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;user&apos;@&apos;%&apos; identified by &apos;password&apos; with grant option;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo-error-fix</title>
      <link href="/2018/07/20/hexo-error-fix/"/>
      <url>/2018/07/20/hexo-error-fix/</url>
      <content type="html"><![CDATA[<h2 id="Hexo-错误解决"><a href="#Hexo-错误解决" class="headerlink" title="Hexo 错误解决"></a>Hexo 错误解决</h2><h3 id="1-hexo-new-命令报错：Error-Cannot-find-module-‘-build-Release-DTraceProviderBindings’-…"><a href="#1-hexo-new-命令报错：Error-Cannot-find-module-‘-build-Release-DTraceProviderBindings’-…" class="headerlink" title="1. hexo new 命令报错：Error: Cannot find module ‘./build/Release/DTraceProviderBindings’ …"></a>1. hexo new 命令报错：Error: Cannot find module ‘./build/Release/DTraceProviderBindings’ …</h3><a id="more"></a><p>完整错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123; Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:485:15)</span><br><span class="line">    at Function.Module._load (module.js:437:25)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider/dtrace-provider.js:18:23)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32)</span><br><span class="line">    at tryModuleLoad (module.js:466:12)</span><br><span class="line">    at Function.Module._load (module.js:458:3)</span><br><span class="line">    at Module.require (module.js:513:17)</span><br><span class="line">    at require (internal/module.js:11:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/lib/node_modules/hexo-cli/node_modules/bunyan/lib/bunyan.js:79:18)</span><br><span class="line">    at Module._compile (module.js:569:30)</span><br><span class="line">    at Object.Module._extensions..js (module.js:580:10)</span><br><span class="line">    at Module.load (module.js:503:32) code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure><p>解决办法：</p><p>执行如下命令即可解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-cli -g</span><br><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure></p><p>解决不了可以尝试下这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --no-optional</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
